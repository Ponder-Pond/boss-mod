% Watinga Parts
#define .Part:Watinga 1

% Watinga Actor Variables
% #define .AVar:TurnCounterWatinga 0`

#new:Actor $Watinga
{
% stats
[Index]        D5b
[Level]        0`b
[MaxHP]        40`b
[Coins]         0`b
[Flags]       00000200
[StatusTable] $StatusTable_Watinga
% ai
[PartsCount]   1`s
[PartsTable] $PartsTable_Watinga
[Script]      $Script_Init_Watinga
% move effectiveness
[Escape]        0`b % no escape
[Item]          0`b
[AirLift]       0`b
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b
[PowerBounce]   8`b
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]        50`b 40`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b 20`b % dx dy (usually top left)
[StatusIcon]   10`b 20`b % dx dy (usually top right)
}

#new:StatusTable $StatusTable_Watinga
{
.Status:Normal    0`
.Status:Default   0`
.Status:Sleep     0`
.Status:Poison    0`
.Status:Frozen    0`
.Status:Dizzy     0`
.Status:Fear      0`
.Status:Static    0`
.Status:Paralyze  0`
.Status:Shrink    0`
.Status:Stop      0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:IdleAnimations $IdleAnimations_Watinga
{
.Status:Normal    .Anim:Watinga_Idle
.Status:Stone     .Anim:Watinga_Still
.Status:Sleep     .Anim:Watinga_Still
.Status:Poison    .Anim:Watinga_Idle
.Status:Stop      .Anim:Watinga_Still
.Status:Static    .Anim:Watinga_Idle
.Status:Paralyze  .Anim:Watinga_Still
.Status:Dizzy     .Anim:Watinga_Dizzy
.Status:End
}

#new:DefenseTable $DefenseTable_Watinga
{
.Element:Normal 1`
.Element:End
}

#new:PartsTable $PartsTable_Watinga % ActorPartBlueprint struct in decomp
{
    /% s32 flags %/                 00800000
    /% s8 index %/                  ~Byte:.Part:Watinga
    /% Vec3b posOffset %/           0`b 0`b 0`b
    /% Vec2b targetOffset %/        -10`b 50`b % For cursor when selecting to attack in battle
    /% s16 opacity %/               00FFs
    /% s32* IdleAnimations %/       $IdleAnimations_Watinga
    /% s32* defenseTable %/         $DefenseTable_Watinga
    /% s32 eventFlags %/            00000000
    /% s32 elementImmunityFlags %/  00000000
    /% s8 unk_1C %/                 00b
    /% s8 unk_1D %/                 F6b
    /% s8 unk_1E %/                 00b
    /% s8 unk_1F %/                 00b
    /% s8 unk_20 %/                 00000000
}

#new:Script $Script_Init_Watinga
{
	Call  BindTakeTurn	( .Actor:Self $Script_TakeTurn_Watinga )
	Call  BindIdle	( .Actor:Self $Script_Idle_Watinga )
	Call  BindHandleEvent  ( .Actor:Self $Script_HandleEvent_Watinga )
	Return
	End
}


#new:Script $Script_Idle_Watinga
{
    Return
    End
}

#new:Script $Script_HandleEvent_Watinga
{
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self .False )
	Call     GetLastEvent 	( .Actor:Self *Var0 )
	Switch  *Var0
		CaseOR  ==  .Event:HitCombo
		CaseOR  ==  .Event:Hit
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Pain
			ExecWait DoNormalHit
		EndCaseGroup
		Case  ==  .Event:BurnHit
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Pain
			ExecWait DoImmune
		Case  ==  .Event:BurnDeath
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Pain
			SetConst  *Var2  .Anim:Watinga_Pain  % Change to Death Animation
			ExecWait DoBurnHit
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Pain  % Change to Death Animation
			ExecWait DoDeath
			Return
		Case  ==  .Event:ShockHit
			Call     PlaySoundAtActor 	( .Actor:Self 00000759 )
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Pain
			ExecWait DoShockHit
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Pain
			ExecWait 8029BD70
		Case  ==  .Event:ShockDeath
			Call     PlaySoundAtActor 	( .Actor:Self 00000759 )
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Pain
			ExecWait DoShockHit
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Pain
			ExecWait DoDeath
			Return
		CaseOR  ==  00000017
		CaseOR  ==  .Event:Immune
		CaseOR  ==  .Event:AirLiftFailed
		EndCaseGroup
		Case  ==  .Event:Death
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Pain
			ExecWait DoNormalHit
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Pain
			ExecWait DoDeath
			Return
		Case  ==  .Event:RecoverStatus
			SetConst  *Var0  .Part:Watinga
			SetConst  *Var1  .Anim:Watinga_Idle
			ExecWait DoRecover
		Default
	EndSwitch
	Call     EnableIdleScript 	( .Actor:Self .True )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_TakeTurn_Watinga
{
    Call  EnableIdleScript 	( .Actor:Self .False )
    Call  UseIdleAnimation 	( .Actor:Self .False )
    Label CheckPhase
    Call GetActorHP ( .Actor:Self *Var3 )
    If *Var3 < 21`
        Goto SecondPhase
    Else
        Goto FirstPhase
    EndIf
	Label FirstPhase
	Call RandInt (100` *Var1) % Get Summon to do
	Switch *Var1
		Case < 40` % 40% Chance
			Set *Var0 0` % Fly Summon
		Case < 70` % 30% Chance
			Set *Var0 1` % Big Fly Summon
		Case < 90` % 20% Chance
			Set *Var0 2` % Fly Parent Summon
		Case < 100` % 10% Chance
			Set *Var0 3` % Fly Bomb  Summon
	EndSwitch
	Label FirstPhaseAttacks
	Set  *Var0 0` % Always use the same attack, testing purposes.
	% Which Attack?
	Switch *Var0
		Case == 0`
			% ExecWait $Summon_Fly
			Goto EndTurn
		Case == 1`
			% ExecWait $Summon_BigFly
			Goto EndTurn
		Case == 2`
			% ExecWait $Summon_FlyParent
			Goto EndTurn
		Case == 3`
			% ExecWait $Summon_FlyBomb
			Goto EndTurn
	EndSwitch

	Label SecondPhase

	Label EndTurn
	Call  EnableIdleScript 	( .Actor:Self .True )
	Call  UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
